// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team.Persistence.DatabaseContext;

#nullable disable

namespace Team.Persistence.Migrations
{
    [DbContext(typeof(TeamDatabaseContext))]
    [Migration("20240509205711_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Team.Domain.Entities.OpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("Team.Domain.Entities.OpeningHoursTimeSlot", b =>
                {
                    b.Property<Guid>("OpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OpeningTimeSlotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OpeningHoursId", "OpeningTimeSlotId");

                    b.HasIndex("OpeningTimeSlotId");

                    b.ToTable("OpeningHoursTimeSlot");
                });

            modelBuilder.Entity("Team.Domain.Entities.OpeningTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("OpeningTimeSlots");
                });

            modelBuilder.Entity("Team.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfAppointments")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("AppointmentDuration")
                        .HasColumnType("time");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Team.Domain.Entities.TeamOpeningHours", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OpeningHoursId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId", "OpeningHoursId");

                    b.HasIndex("OpeningHoursId");

                    b.ToTable("TeamOpeningHours");
                });

            modelBuilder.Entity("Team.Domain.Entities.OpeningHoursTimeSlot", b =>
                {
                    b.HasOne("Team.Domain.Entities.OpeningHours", "OpeningHours")
                        .WithMany("OpeningHoursTimeSlots")
                        .HasForeignKey("OpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team.Domain.Entities.OpeningTimeSlot", "OpeningTimeSlot")
                        .WithMany("OpeningHoursTimeSlots")
                        .HasForeignKey("OpeningTimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningHours");

                    b.Navigation("OpeningTimeSlot");
                });

            modelBuilder.Entity("Team.Domain.Entities.TeamOpeningHours", b =>
                {
                    b.HasOne("Team.Domain.Entities.OpeningHours", "OpeningHours")
                        .WithMany("TeamOpeningHours")
                        .HasForeignKey("OpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team.Domain.Entities.Team", "Team")
                        .WithMany("TeamOpeningHours")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningHours");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Team.Domain.Entities.OpeningHours", b =>
                {
                    b.Navigation("OpeningHoursTimeSlots");

                    b.Navigation("TeamOpeningHours");
                });

            modelBuilder.Entity("Team.Domain.Entities.OpeningTimeSlot", b =>
                {
                    b.Navigation("OpeningHoursTimeSlots");
                });

            modelBuilder.Entity("Team.Domain.Entities.Team", b =>
                {
                    b.Navigation("TeamOpeningHours");
                });
#pragma warning restore 612, 618
        }
    }
}
